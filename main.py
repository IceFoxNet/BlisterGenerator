from PIL import Image, ImageFont, ImageDraw, ImageEnhance
import pathlib, yadisk, gspread
import cv2, time, aiohttp, pathlib
from rembg import remove
import os

from sqlalchemy import Column, String, UUID
from sqlalchemy.orm import declarative_base, sessionmaker, Session
from sqlalchemy import create_engine
from uuid import uuid4 as uuid
from sqlalchemy import and_, delete

Base = declarative_base()
class Media(Base):
    __tablename__ = 'media'
    id = Column(UUID, nullable=False, primary_key=True, comment='ID –°–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞')
    author_id = Column(UUID, nullable=False, comment='ID –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –º–µ–¥–∏–∞')
    name = Column(String, nullable=False, comment='–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
    url = Column(String, comment='–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–¥–∏–∞')
    author_ver = Column(String, comment='–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –º–µ–¥–∏–∞')
    resource_id = Column(String, nullable=False, comment='–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–µ–¥–∏–∞')
    product_id = Column(String, nullable=False, comment='–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞')
    description = Column(String, comment='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞')

class DBConnect:
    def __init__(self, appInfo: dict):
        self.login = appInfo.get('DBLogin')
        self.password = appInfo.get('DBPassword')
        self.appVer = appInfo.get('AppVer')
        self.id = appInfo.get('DBID')
        try:
            engine = create_engine(url=f"postgresql+psycopg2://{self.login}:{self.password}@scope-db-lego-invest-group.db-msk0.amvera.tech:5432/LEGOSystems")
            Session = sessionmaker(bind=engine)
            self.session = Session()
        except Exception as e:
            raise SystemError(f'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}')

    def create_media(self, url: str, filename: str, resource_id: str, product_id: str, description: str | None):
        new_media = Media(
            id = uuid(),
            author_id = self.id,
            author_ver = self.appVer,
            resource_id = resource_id,
            product_id = product_id,
            url = url,
            name = filename,
            description = description
        )
        self.session.add(new_media)
        self.session.commit()

    def is_actual_media_generated(self, resource_id: str):
        results = self.session.query(Media.author_ver).where(and_(Media.author_id == self.id, Media.resource_id == resource_id)).all()
        if len(results) == 0: return False
        return all(res[0] == self.appVer for res in results)

    def delete_media(self, resource_id: str, filename: str):
        media = self.session.query(Media).where(and_(Media.author_id == self.id, Media.resource_id == resource_id, Media.name == filename)).one_or_none()
        if media is not None:
            self.session.execute(delete(Media).where(Media.id == media.id))
    
    def close(self):
        self.session.close()

# ======================= –§–£–ù–ö–¶–ò–ò =======================

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —à–∏—Ä–∏–Ω–µ
def wrap_text(text, font, max_width):
    words = text.split()
    lines = []
    current_line = ""
    for word in words:
        test_line = f"{current_line} {word}".strip()
        if font.getbbox(test_line)[2] <= max_width:
            current_line = test_line
        else:
            lines.append(current_line)
            current_line = word
    lines.append(current_line)
    return lines

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def download_image(session, art):
    global downloaded_image_buffer
    try:
        url = f"https://img.bricklink.com/ItemImage/MN/0/{art}.png"
        response = await session.get(url)
        if response.status == 200:
            with open(downloaded_image_buffer, "wb") as f:
                f.write(await response.read())
            return downloaded_image_buffer
        elif response.status == 404:
            url = f"https://img.bricklink.com/ItemImage/SN/0/{art}.png"
            response = await session.get(url)
            if response.status == 200:
                with open(downloaded_image_buffer, "wb") as f:
                    f.write(await response.read())
                return downloaded_image_buffer
            else:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {art}. –°—Ç–∞—Ç—É—Å: {response.status}")
                return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {art}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def is_white_background(image_path, threshold=240):
                """
                –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–ª—ã–º.
                threshold ‚Äî –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–µ–ª–æ–≥–æ —Ü–≤–µ—Ç–∞.
                """
                try:
                    with Image.open(image_path) as img:
                        img = img.convert("RGBA")
                        # –ë–µ—Ä–µ–º –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–Ω–∞
                        width, height = img.size
                        top_pixels = [img.getpixel((x, 0)) for x in range(width)]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–∏–∫—Å–µ–ª–∏ –±–ª–∏–∑–∫–∏ –∫ –±–µ–ª–æ–º—É —Ü–≤–µ—Ç—É
                        white_pixels = [pixel for pixel in top_pixels if all(val >= threshold for val in pixel[:3])]
                        # –ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –±–µ–ª—ã–µ, —Å—á–∏—Ç–∞–µ–º —Ñ–æ–Ω –±–µ–ª—ã–º
                        return len(white_pixels) / len(top_pixels) > 0.8
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    return False

# ======================= –ù–ê–°–¢–†–û–ô–ö–ê =======================

workspace = pathlib.Path(__file__).parent.resolve()
downloaded_image_buffer = os.path.join(workspace, 'download_buffer.png')

SE = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (4, 4))

# –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
try:
    font_path_regular = os.path.join(workspace, "Inter.ttf")
    font_path_medium = os.path.join(workspace, "Inter-Medium.ttf")
    font_path_bold = os.path.join(workspace, "Inter-Bold.ttf")

    main_font_29 = ImageFont.truetype(font_path_regular, 29)
    main_font_12 = ImageFont.truetype(font_path_regular, 12)
    main_font_42_medium = ImageFont.truetype(font_path_medium, 42)
    main_font_82_bold = ImageFont.truetype(font_path_bold, 82)
    main_font_49_bold = ImageFont.truetype(font_path_bold, 49)

except IOError:
    print("–®—Ä–∏—Ñ—Ç—ã 'Inter.ttf', 'Inter-Medium.ttf' –∏–ª–∏ 'Inter-Bold.ttf' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏.")

try:
    with Image.open(os.path.join(workspace, "sample.jpg")) as background_template:
        background_template.load()
except FileNotFoundError:
    print("–§–∞–π–ª 'sample.jpg' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# ======================= –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô =======================

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def main(start: int, end: int, setup: dict):

    if start < 3: start = 3
    
    sheet: gspread.spreadsheet.Spreadsheet = setup.get('AutoloadSheet')
    yandex: yadisk.YaDisk = setup.get('YandexDisk')
    worksheet = sheet.worksheet("üì¶ –§–∏–≥—É—Ä–∫–∏") 
    dbconn = DBConnect(setup.get('AppInfo'))
    arts = worksheet.range(f'D{start}:D{end}')  # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ 4 (–∞—Ä—Ç–∏–∫—É–ª)
    names = worksheet.range(f'C{start}:C{end}')  # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ 3 (–Ω–∞–∑–≤–∞–Ω–∏–µ)
    serieses = worksheet.range(f'B{start}:B{end}')  # –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ 2 (—Å–µ—Ä–∏—è)
    
    async with aiohttp.ClientSession(proxy='http://user258866:pe9qf7@166.0.211.142:7576') as session:
        for i in range(len(arts)):
            art = arts[i].value
            if not art:
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {i+1}: –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                continue

            if dbconn.is_actual_media_generated(art):
                print(f'–ü—Ä–æ–ø—É—â–µ–Ω –∞—Ä—Ç–∏–∫—É–ª {art}: –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª–∏—Å—Ç–µ—Ä–æ–≤ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã')
                continue

            typ = 'Minifigure'
            name = names[i].value or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            series = serieses[i].value or "–ë–µ–∑ —Å–µ—Ä–∏–∏"

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file_path = await download_image(session, art)
            if not file_path:
                continue

            # –†–∞–±–æ—Ç–∞ —Å —Ñ–æ–Ω–æ–º –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            main_template = background_template.copy().convert("RGBA")
            overlay = Image.new(mode="RGBA", size=main_template.size, color=(0, 0, 0, 0))

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–º–æ–∫ Frame_Gray.png –∏ Frame_Green.png
            try:
                frame_gray_path = os.path.join(workspace, "Frame_Gray.png")
                frame_green_path = os.path.join(workspace, "Frame_Green.png")

                if os.path.exists(frame_gray_path):
                    with Image.open(frame_gray_path).convert("RGBA") as frame_gray:
                        gray_position = (60, 560)
                        overlay.paste(frame_gray, gray_position, mask=frame_gray)

                if os.path.exists(frame_green_path):
                    with Image.open(frame_green_path).convert("RGBA") as frame_green:
                        frame_bg = Image.new(mode="RGBA", size=frame_green.size, color=(255, 255, 255, 255))
                        frame_green_with_bg = Image.alpha_composite(frame_bg, frame_green)
                        green_position = (60, 894)
                        overlay.paste(frame_green_with_bg, green_position)
            except FileNotFoundError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–º–æ–∫: {e}")
                continue

            # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ —Å–µ—Ä–∏–∏
            series_file = os.path.join(workspace, f'series/{series.replace(" ", "")}.png')
            if os.path.exists(series_file):
                try:
                    with Image.open(series_file) as img3:
                        overlay.paste(img3.resize((960, 167)), (60, 60))
                except FileNotFoundError:
                    print(f"–§–∞–π–ª {series_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            drawer = ImageDraw.Draw(overlay)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
            art_position = (102, 745)
            drawer.text(art_position, art, font=main_font_49_bold, fill='black')

            text_bbox = drawer.textbbox((0, 0), art, font=main_font_49_bold)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]

            underline_y = art_position[1] + text_height + 16
            line_width = 5

            drawer.line(
                [(art_position[0], underline_y), (art_position[0] + text_width, underline_y)],
                fill='black', width=line_width
            )

            # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            lines = wrap_text(name, main_font_29, 400)
            y_offset = 0
            for line in lines:
                drawer.text((102, 589 + y_offset), line, font=main_font_29, fill='black')
                y_offset += 40

            # –¢–µ–∫—Å—Ç "typ"
            drawer.text((102, 931.5), typ, font=main_font_42_medium, fill='black')

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            def wrap_text_to_box(text, font, max_width):
                words = text.split(' ')
                lines = []
                current_line = ""

                for word in words:
                    test_line = current_line + " " + word if current_line else word
                    line_width = drawer.textbbox((0, 0), test_line, font=font)[2] - \
                                 drawer.textbbox((0, 0), test_line, font=font)[0]

                    if line_width <= max_width:
                        current_line = test_line
                    else:
                        lines.append(current_line)
                        current_line = word

                if current_line:
                    lines.append(current_line)

                return lines

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            start_x = 60
            start_y = 1020
            box_width = 960  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –±–ª–æ–∫–∞
            box_height = 60  # –í—ã—Å–æ—Ç–∞ –±–ª–æ–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            line_height = 16  # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏)

            # –¢–µ–∫—Å—Ç —Å —Ç–æ–≤–∞—Ä–Ω—ã–º –∑–Ω–∞–∫–æ–º
            trademark_text = (
                "LEGO, the LEGO logo, the Minifigure, DUPLO, the DUPLO logo, NINJAGO, "
                "the NINJAGO logo, the FRIENDS logo, the HIDDEN SIDE logo, the MINIFIGURES logo, "
                "MINDSTORMS and the MINDSTORMS logo are trademarks of the LEGO Group. ¬©2023 The LEGO Group. "
                "All rights reserved."
            )

            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —É—á–∏—Ç—ã–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
            lines = wrap_text_to_box(trademark_text, main_font_12, box_width)

            # –û–±—â–∞—è –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
            total_text_height = len(lines) * line_height

            # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É
            y_offset = start_y + (box_height - total_text_height) // 2

            # –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –≤—ã—Å–æ—Ç–µ
            for line in lines:
                # –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
                line_width = drawer.textbbox((0, 0), line, font=main_font_12)[2] - \
                             drawer.textbbox((0, 0), line, font=main_font_12)[0]

                # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É
                x_offset = start_x + (box_width - line_width) // 2

                # –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞
                drawer.text((x_offset, y_offset), line, font=main_font_12, fill="#808080")

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º Y –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
                y_offset += line_height
            
            # =========================== –ü–ï–†–í–ê–Ø –§–û–¢–û–ì–†–ê–§–ò–Ø (–§–ò–ì–£–†–ö–ê + –ö–û–†–û–ë–ö–ê) ===========================
            
            try:
                yandex.remove(f'–ê–≤–∏—Ç–æ/{art}')
            except:
                pass
            try:
                yandex.mkdir(f'–ê–≤–∏—Ç–æ/{art}')
            except:
                pass
            
            flag = False
            num = 1

            card_output_path = os.path.join(workspace, f'{art}_{num}.png')
            res_img = main_template.copy()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            try:
                img = Image.open(file_path)
                result = remove(img)
                output_path = file_path.replace('.jpg', '_no_bg.png')
                result.save(output_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {art}: {e}")
                flag = True
            
            if not flag:
                try:
                    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    cleaned_series = series.replace(" ", "").replace("/", "_").replace("\\", "_").replace(":", "_").replace(
                        "*", "_").replace("?", "_").replace('"', "_").replace("<", "_").replace(">", "_").replace("|", "_")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ Blister
                    blister_image_path = os.path.join(os.path.join(workspace, "Blister"),                         
                    f"{cleaned_series}_Front.png")  # –ò–ª–∏ .jpg, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                    if os.path.exists(blister_image_path):
                        with Image.open(blister_image_path).convert("RGBA") as blister_img:
                            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Blister –ø–æ —Ç–µ–º –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º, —á—Ç–æ –∏ —Ñ–∏–≥—É—Ä–∫–∞
                            blister_img = blister_img.resize((int(730 / blister_img.height * blister_img.width), 730))
                            center_x = (500 + 1080) / 2
                            position_x = center_x - blister_img.width / 2
                            position_y = 1025 - blister_img.height
                            res_img.paste(blister_img, (int(position_x), int(position_y)), mask=blister_img)
                    else:
                        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Blister –¥–ª—è —Å–µ—Ä–∏–∏ {series} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {blister_image_path}")
                        raise FileNotFoundError('–ë–ª–∏—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ñ–∏–≥—É—Ä–∫–∏
                    with Image.open(output_path).convert("RGBA") as img1:
                        img1 = img1.resize((int(245 / img1.height * img1.width), 245))
                        img1_overlay = Image.new('RGBA', img1.size, (216, 223, 243, int(225 * 0.1)))
                        masked_overlay = Image.new('RGBA', img1.size, (0, 0, 0, 0))
                        masked_overlay.paste(img1_overlay, mask=img1)
                        img1_with_opacity = Image.alpha_composite(img1, masked_overlay)
                        center_x = (510 + 1080) / 2
                        position_x = center_x - img1_with_opacity.width / 2
                        position_y = 925 - img1_with_opacity.height
                        bright_enhance = ImageEnhance.Brightness(img1_with_opacity)
                        img1_with_opacity = bright_enhance.enhance(0.7)
                        contrast_enhance = ImageEnhance.Contrast(img1_with_opacity)
                        img1_with_opacity = contrast_enhance.enhance(1.65)

                        res_img.paste(img1_with_opacity, (int(position_x), int(position_y)), mask=img1_with_opacity)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è)
                    res_img = Image.alpha_composite(res_img, overlay)
                    res_img.save(card_output_path)
                    disk_path = f'–ê–≤–∏—Ç–æ/{art}/{art}_{num}.png'
                    yandex.upload(card_output_path, disk_path, overwrite=True)
                    yandex.publish(disk_path)
                    media_url = yandex.get_meta(disk_path).public_url
                    if media_url is not None:
                        media_url = media_url.replace('yadi.sk', 'disk.yandex.ru')
                    dbconn.delete_media(art, disk_path)
                    dbconn.create_media(media_url, disk_path, art, f'ID-M-{art}-0-0', f'–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –±–ª–∏—Å—Ç–µ—Ä–æ–º, —Ñ–∏–≥—É—Ä–∫–∞ + –∫–æ—Ä–æ–±–∫–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è BrickLink, {series}, {name}')
                    print(f"–ü–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {art} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                    os.remove(card_output_path)
                    num += 1
            
            # =========================== –í–¢–û–†–ê–Ø –§–û–¢–û–ì–†–ê–§–ò–Ø (–ö–û–†–û–ë–ö–ê) ===========================

            flag = False
            card_output_path = os.path.join(workspace, f'{art}_{num}.png')
            res_img = main_template.copy()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ Blister
            blister_image_path = os.path.join(os.path.join(workspace, "Blister"),
            f"{cleaned_series}_Back.png")  # –ò–ª–∏ .jpg, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if os.path.exists(blister_image_path):
                with Image.open(blister_image_path).convert("RGBA") as blister_img:
                    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Blister –ø–æ —Ç–µ–º –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º, —á—Ç–æ –∏ —Ñ–∏–≥—É—Ä–∫–∞
                    blister_img = blister_img.resize((int(730 / blister_img.height * blister_img.width), 730))
                    center_x = (500 + 1080) / 2
                    position_x = center_x - blister_img.width / 2
                    position_y = 1025 - blister_img.height
                    res_img.paste(blister_img, (int(position_x), int(position_y)), mask=blister_img)
            else:
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Blister –¥–ª—è —Å–µ—Ä–∏–∏ {series} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {blister_image_path}")
                flag = True
            
            if not flag:
                img2 = Image.alpha_composite(res_img, overlay)
                img2.save(card_output_path)
                disk_path = f'–ê–≤–∏—Ç–æ/{art}/{art}_{num}.png'
                yandex.upload(card_output_path, disk_path, overwrite=True)
                yandex.publish(disk_path)
                media_url = yandex.get_meta(disk_path).public_url
                if media_url is not None:
                    media_url = media_url.replace('yadi.sk', 'disk.yandex.ru')
                dbconn.delete_media(art, disk_path)
                dbconn.create_media(media_url, disk_path, art, f'ID-M-{art}-0-0', f'–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –±–ª–∏—Å—Ç–µ—Ä–æ–º, –∫–æ—Ä–æ–±–∫–∞, {series}, {name}')
                print(f"–í—Ç–æ—Ä–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {art} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                os.remove(card_output_path)
                num += 1

            # =========================== –¢–†–ï–¢–¨–Ø –§–û–¢–û–ì–†–ê–§–ò–Ø (–§–ò–ì–£–†–ö–ê) ===========================
            
            flag = False
            card_output_path = os.path.join(workspace, f'{art}_{num}.png')
            res_img = main_template.copy()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ–Ω –±–µ–ª—ã–º
            if not is_white_background(file_path):
                try:
                    img = Image.open(file_path)
                    result = remove(img)
                    output_path = file_path.replace('.jpg', '_no_bg.png')
                    result.save(output_path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ–Ω–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {art} (—Ç—Ä–µ—Ç—å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è): {e}")
                    output_path = file_path  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            else:
                output_path = file_path  # –ï—Å–ª–∏ —Ñ–æ–Ω –±–µ–ª—ã–π, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            try:
                with Image.open(output_path).convert("RGBA") as img3:
                    img3 = img3.resize((int(624 / img3.height * img3.width), 624))
                    white_bg = Image.new("RGBA", img3.size, (255, 255, 255, 255))
                    figure_img = Image.alpha_composite(white_bg, img3)

                    center_x = (520 + 1080) / 2
                    position_x = center_x - img3.width / 2
                    position_y = 1020 - img3.height

                    res_img.paste(figure_img, (int(position_x), int(position_y)))
            except FileNotFoundError:
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {output_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img3 = Image.alpha_composite(res_img, overlay)
                output_path = os.path.join(workspace, f'{art}_{num}.png')
                img3.save(output_path)
                disk_path = f'–ê–≤–∏—Ç–æ/{art}/{art}_{num}.png'
                yandex.upload(card_output_path, disk_path, overwrite=True)
                yandex.publish(disk_path)
                media_url = yandex.get_meta(disk_path).public_url
                if media_url is not None:
                    media_url = media_url.replace('yadi.sk', 'disk.yandex.ru')
                dbconn.delete_media(art, disk_path)
                dbconn.create_media(media_url, disk_path, art, f'ID-M-{art}-0-0', f'–ö–∞—Ä—Ç–æ—á–∫–∞ —Å –±–ª–∏—Å—Ç–µ—Ä–æ–º, —Ñ–∏–≥—É—Ä–∫–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è BrickLink, {series}, {name}')
                print(f"–¢—Ä–µ—Ç—å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {art} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                os.remove(card_output_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    dbconn.close()

if __name__ == '__main__':
    from Setup.setup import setup
    import asyncio
    asyncio.run(main(3, 8, setup))